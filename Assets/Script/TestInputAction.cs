//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Script/TestInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TestInputAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TestInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TestInputAction"",
    ""maps"": [
        {
            ""name"": ""TestActionMap"",
            ""id"": ""a43b5c2f-f1b8-493a-a81f-a7f111da78fe"",
            ""actions"": [
                {
                    ""name"": ""ScreenTouch"",
                    ""type"": ""Button"",
                    ""id"": ""b347664f-cfdf-4dd3-92c5-02b2dd14fc80"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScreenTouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""bd70ee55-cd0b-447d-b8ac-281edec082f3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""BackButton"",
                    ""type"": ""Button"",
                    ""id"": ""b9e30621-d285-4f01-a6eb-6243b11f352b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""64e7e0a9-4678-43d4-bc5d-1a1b5c1d96a8"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScreenTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""860c77a5-731d-4bb1-ad76-ef5c3ece9864"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScreenTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8df12250-b5bb-406e-81a0-4290ad739776"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScreenTouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""088ee652-102c-4904-b202-06f34f78a812"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScreenTouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf988f86-eaed-4de6-80de-d78e52913e4e"",
                    ""path"": ""*/{Back}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BackButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TestActionMap
        m_TestActionMap = asset.FindActionMap("TestActionMap", throwIfNotFound: true);
        m_TestActionMap_ScreenTouch = m_TestActionMap.FindAction("ScreenTouch", throwIfNotFound: true);
        m_TestActionMap_ScreenTouchPosition = m_TestActionMap.FindAction("ScreenTouchPosition", throwIfNotFound: true);
        m_TestActionMap_BackButton = m_TestActionMap.FindAction("BackButton", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TestActionMap
    private readonly InputActionMap m_TestActionMap;
    private ITestActionMapActions m_TestActionMapActionsCallbackInterface;
    private readonly InputAction m_TestActionMap_ScreenTouch;
    private readonly InputAction m_TestActionMap_ScreenTouchPosition;
    private readonly InputAction m_TestActionMap_BackButton;
    public struct TestActionMapActions
    {
        private @TestInputAction m_Wrapper;
        public TestActionMapActions(@TestInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @ScreenTouch => m_Wrapper.m_TestActionMap_ScreenTouch;
        public InputAction @ScreenTouchPosition => m_Wrapper.m_TestActionMap_ScreenTouchPosition;
        public InputAction @BackButton => m_Wrapper.m_TestActionMap_BackButton;
        public InputActionMap Get() { return m_Wrapper.m_TestActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestActionMapActions set) { return set.Get(); }
        public void SetCallbacks(ITestActionMapActions instance)
        {
            if (m_Wrapper.m_TestActionMapActionsCallbackInterface != null)
            {
                @ScreenTouch.started -= m_Wrapper.m_TestActionMapActionsCallbackInterface.OnScreenTouch;
                @ScreenTouch.performed -= m_Wrapper.m_TestActionMapActionsCallbackInterface.OnScreenTouch;
                @ScreenTouch.canceled -= m_Wrapper.m_TestActionMapActionsCallbackInterface.OnScreenTouch;
                @ScreenTouchPosition.started -= m_Wrapper.m_TestActionMapActionsCallbackInterface.OnScreenTouchPosition;
                @ScreenTouchPosition.performed -= m_Wrapper.m_TestActionMapActionsCallbackInterface.OnScreenTouchPosition;
                @ScreenTouchPosition.canceled -= m_Wrapper.m_TestActionMapActionsCallbackInterface.OnScreenTouchPosition;
                @BackButton.started -= m_Wrapper.m_TestActionMapActionsCallbackInterface.OnBackButton;
                @BackButton.performed -= m_Wrapper.m_TestActionMapActionsCallbackInterface.OnBackButton;
                @BackButton.canceled -= m_Wrapper.m_TestActionMapActionsCallbackInterface.OnBackButton;
            }
            m_Wrapper.m_TestActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ScreenTouch.started += instance.OnScreenTouch;
                @ScreenTouch.performed += instance.OnScreenTouch;
                @ScreenTouch.canceled += instance.OnScreenTouch;
                @ScreenTouchPosition.started += instance.OnScreenTouchPosition;
                @ScreenTouchPosition.performed += instance.OnScreenTouchPosition;
                @ScreenTouchPosition.canceled += instance.OnScreenTouchPosition;
                @BackButton.started += instance.OnBackButton;
                @BackButton.performed += instance.OnBackButton;
                @BackButton.canceled += instance.OnBackButton;
            }
        }
    }
    public TestActionMapActions @TestActionMap => new TestActionMapActions(this);
    public interface ITestActionMapActions
    {
        void OnScreenTouch(InputAction.CallbackContext context);
        void OnScreenTouchPosition(InputAction.CallbackContext context);
        void OnBackButton(InputAction.CallbackContext context);
    }
}
